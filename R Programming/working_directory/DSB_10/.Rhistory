knitr::opts_chunk$set(echo = TRUE)
## Convert Data Types
## main functions
## as.numeric()
## as.character()
## as.logical()
x <- 100
class(x)
char_x <- as.character(x)
num_x <- as.numeric(x)
## logical: TRUE/FALSE
as.logical(0)
as.logical(1)
as.numeric(0)
as.numeric(1)
## --------------------------------------------------------
## vector
1:10
11:25
## sequence generation
seq(from = 1, to = 100, by = 5)
## help file
help(seq)
## function c
friends <- c("David", "Marry", "Anna", "John", "William")
is_male <- c(TRUE, FALSE, FALSE, TRUE, TRUE)
## --------------------------------------------------------
## matrix
x <- 1:25
length(x)
dim(x) <- c(5,5)
m1 <- matrix(1:25, ncol=5)
m2 <- matrix(1:6, ncol=3, nrow=2, byrow = T)
## Element wise computation
m1 + 100
m2 * 10
## --------------------------------------------------------
## list
my_name <- "Ham"
my_friends <- c("Wan", "Eng", "Sue")
m3 <- matrix(1:25, ncol=5)
r_iscool <- TRUE
my_list <- list(item1 = my_name,
item2 = my_friends,
item3 = m3,
item4 = r_iscool)
my_list$item1
my_list$item2
my_list$item3
my_list$item4
## --------------------------------------------------------
## Data Frames
friends <- c("Wan", "Erik", "Ashley", "Bee", "Toon")
Ages <- c(26, 27, 27, 28, 32)
locations <- c("New York",
"London",
"Tokyo",
"Manchester",
"New York")
movie_lover <- c(TRUE, TRUE, TRUE, FALSE, FALSE)
df <- data.frame(friends,
Ages,
locations,
movie_lover)
View(df)
## create data frame from list
my_list <- list(friends = friends,
ages = Ages,
locations = locations,
movie_lover = movie_lover)
data.frame(my_list)
## --------------------------------------------------------
## subset
friends[1:3]
friends[c(1, 3, 5)]
friends[4:5]
ages <- c(26, 27, 27, 28, 32)
View(df)
ifelse(score >= 90, "Passed", ifelse(
score >= 50, "OK", "Enroll Again"
))
## control flow
## if else statement
score = readline( prompt = "Enter your score: ")
score = as.numeric(score);
if (score >= 80){
print("Passed")
} else {
print("Failed")
}
ifelse(score >= 90, "Passed", ifelse(
score >= 50, "OK", "Enroll Again"
))
## for loop
mat <- matrix(rnorm(100), ncol = 5)
par(mfrow = c(2,3))
for (i in 1:5) {
hist(mat[, i], main = paste("Column", i), xlab = "Values", col = "lightblue")
}
## while loop
while (score <= 90) {
score <- score + 1
}
## function: input -> f() -> output
x <- c(10, 20, 55, 77, 100)
sum(x)
mean(x)
sd(x)
name_age <- function(){
name = readline(prompt = "Enter your name: ")
age = readline(prompt = "Enter your age: ")
age = as.integer(age)
print( paste("Hello", name, "!! Your age is", age) )
}
name_age()
greeting_name <- function(name = "Ham", age = 22) {
print(paste("Hello! ", name))
print(paste("Age: ", age))
}
greeting_name <- function(name = "Ham", age = 22) {
print(paste("Hello! ", name))
print(paste("Age: ", age))
}
greeting_name()
greeting_name <- function(name = "Ham", age = 22) {
print(paste("Hello!", name))
print(paste("Age:", age))
}
greeting_name()
# add_two_nums() function
add_two_nums <- function(val1, val2) {
val1 + val2
}
# cube() function
cube <- function(base, power=3) {
return(base ** power)
}
# count_ball() function
balls <- c("red", "red", "blue", "green",
"green", "green", "green", "red")
count_ball <- function(balls, color) {
sum(balls == color)
}
# add_two_nums() function
add_two_nums <- function(val1, val2) {
val1 + val2
}
# cube() function
cube <- function(base, power=3) {
return(base ** power)
}
# count_ball() function
balls <- c("red", "red", "blue", "green",
"green", "green", "green", "red")
count_ball <- function(balls, color) {
sum(balls == color)
}
count_ball(balls, c("red", "blue"))
# add_two_nums() function
add_two_nums <- function(val1, val2) {
val1 + val2
}
# cube() function
cube <- function(base, power=3) {
return(base ** power)
}
# count_ball() function
balls <- c("red", "red", "blue", "green",
"green", "green", "green", "red")
count_ball <- function(balls, color) {
sum(balls == color)
}
count_ball(balls, c("red", "blue"))
# add_two_nums() function
add_two_nums <- function(val1, val2) {
val1 + val2
}
# cube() function
cube <- function(base, power=3) {
return(base ** power)
}
# count_ball() function
balls <- c("red", "red", "blue", "green",
"green", "green", "green", "red")
count_ball <- function(balls, color) {
sum(balls == color)
}
count_ball(balls, c("red"))
# add_two_nums() function
add_two_nums <- function(val1, val2) {
val1 + val2
}
# cube() function
cube <- function(base, power=3) {
return(base ** power)
}
# count_ball() function
balls <- c("red", "red", "blue", "green",
"green", "green", "green", "red")
count_ball <- function(balls, color) {
sum(balls == color)
}
count_ball(balls, "red")
count_ball(balls, "blue")
count_ball(balls, "green")
# refactor our code for more readability
cal_mean_by_col <- function(df) {
col_names <- names(df)
# we use [[]] to extract column as vector
for (i in 1:ncol(df)) {
avg_col <- mean(df[[i]])
print(paste(col_names[i], ":", avg_col))
}
}
# test our code with mtcars
cal_mean_by_col(mtcars)
# refactor our code for more readability
cal_mean_by_col <- function(df) {
col_names <- names(df)
# we use [[]] to extract column as vector
for (i in 1:ncol(df)) {
avg_col <- mean(df[[i]])
print(paste(col_names[i], ":", avg_col))
}
}
# test our code with mtcars
cal_mean_by_col(mtcars)
# apply function
avg_by_row_mtcars <- apply(mtcars, MARGIN = 1, mean())
# apply function
avg_by_row_mtcars <- apply(mtcars, MARGIN = 1, mean
# apply function
avg_by_row_mtcars <- apply(mtcars, MARGIN = 1, mean)
# apply function
avg_by_row_mtcars <- apply(mtcars, MARGIN = 1, mean)
avg_by_row_mtcars[1:10]
# apply function
avg_by_row_mtcars <- apply(mtcars, MARGIN = 2, mean)
avg_by_row_mtcars[1:10]
# apply function
avg_by_row_mtcars <- apply(mtcars, MARGIN = 1, mean)
avg_by_row_mtcars[1:10]
# apply function: MARGIN = (1: By rows, 2: By columns)
avg_by_row_mtcars <- apply(mtcars, MARGIN = 1, mean)
avg_by_row_mtcars[1:10]
knitr::opts_chunk$set(echo = TRUE)
# install packages
install.packages(c("readr",
"readxl",
"googlesheets4",
"jsonlite",
"dplyr",
"sqldf",
"RSQLite"))
# load library
library(readr)
library(readxl)
library(googlesheets4)
library(jsonlite)
library(dplyr)
library(sqldf)
library(RSQLite)
# read text file
student1 <- read_table("C:\Online Learning\DataRockie Bootcamp\DataRockie Bootcamp 10th\R Programming\data\student.txt")
# read text file
student1 <- read_table("cd \Online Learning\DataRockie Bootcamp\DataRockie Bootcamp 10th\R Programming\data\student.txt")
# read text file
student1 <- read_table("C/Online Learning/DataRockie Bootcamp/DataRockie Bootcamp 10th/R Programming/data/student.txt")
# read text file
student1 <- read_table("C:/Online Learning/DataRockie Bootcamp/DataRockie Bootcamp 10th/R Programming/data/student.txt")
student1
# read csv file
student2 <- read_csv("C:/Online Learning/DataRockie Bootcamp/DataRockie Bootcamp 10th/R Programming/data/student.csv")
student2
# read excel file
result <- list()
for (i in 1:3) {
result[[i]] <- read_excel("C:/Online Learning/DataRockie Bootcamp/DataRockie Bootcamp 10th/R Programming/data/students.xlsx", sheet=i)
}
result[[1]]
result[[2]]
result[[3]]
# read JSON file
library(jsonlite)
bp <- data.frame(fromJSON("C:/Online Learning/DataRockie Bootcamp/DataRockie Bootcamp 10th/R Programming/data/blackpink.json"))
View(bp)
library(googlesheets4)
url <- "https://googlesheets4.tidyverse.org/articles/auth.html"
gs4_deauth()
df <- read_sheet(url, sheet = "student")
library(googlesheets4)
url <- "https://googlesheets4.tidyverse.org/articles/auth.html"
gs4_deauth()
read_sheet(url, sheet = "student")
library(googlesheets4)
url <- "https://docs.google.com/spreadsheets/d/1y5JuaUhNrdRzf_hJrdZjZHARK6kHxvoVR5U4IJuGEyQ/edit?gid=1807022667#gid=1807022667"
gs4_deauth()
read_sheet(url, sheet = "Example Data")
library(googlesheets4)
url <- "https://docs.google.com/spreadsheets/d/1y5JuaUhNrdRzf_hJrdZjZHARK6kHxvoVR5U4IJuGEyQ/edit?usp=sharing"
gs4_deauth()
read_sheet(url, sheet = "Example Data")
# read JSON file
library(jsonlite)
bp <- data.frame(fromJSON("C:/Online Learning/DataRockie Bootcamp/DataRockie Bootcamp 10th/R Programming/data/blackpink.json"))
View(bp)
# Bind Rows (UNION ALL in  SQL)
library(dplyr)
library(readxl)
## read excel file
econ <- read_excel("C:/Online Learning/DataRockie Bootcamp/DataRockie Bootcamp 10th/R Programming/data/students.xlsx", sheet = 1)
business <- read_excel("C:/Online Learning/DataRockie Bootcamp/DataRockie Bootcamp 10th/R Programming/data/students.xlsx", sheet = 2)
data <- read_excel("C:/Online Learning/DataRockie Bootcamp/DataRockie Bootcamp 10th/R Programming/data/students.xlsx", sheet = 3)
## binding rows
list_df <- list(econ, business, data)
full_df <- bind_rows(list_df)
# Bind Cols (!= JOIN)
df1 <- data.frame(
id = 1:5,
name = c("John", "Marry", "Anna", "David", "Lisa")
)
df2 <- data.frame(
id = 1:5,
city = c(rep("BANGKOK", 3), rep("LONDON", 2)),
country = c(rep("TH", 3), rep("UK", 2))
)
# load library sqldf
library(sqldf)
library(readr)
school <- read_csv("C:/Online Learning/DataRockie Bootcamp/DataRockie Bootcamp 10th/R Programming/data/school/school.csv")
sqldf("select * from school;")
sqldf("select avg(student), sum(student) from school;")
sqldf("select school_id, school_name, country from school;")
sql_query <- "select * from school where country = 'USA';"
usa_school <- sqldf(sql_query)
# load library
library(RSQLite)
# connect to SQLite database (.db file)
# 1. open connection
conn <- dbConnect(SQLite(), "C:/Online Learning/DataRockie Bootcamp/DataRockie Bootcamp 10th/R Programming/data/chinook/chinook.db")
# 2. get data
dbListTables(conn)
dbListFields(conn, "customers")
df <- dbGetQuery(conn, "select * from customers where country = 'USA'")
df2 <- dbGetQuery(conn, "select * from customers where country = 'United Kingdom'")
# 3. close connection
dbDisconnect(conn)
saveRDS(business, file = "business.rds")
readRDS("business.rds")
business <- readRDS("business.rds")
save.image()
knitr::opts_chunk$set(echo = TRUE)
## install packages
install.packages("dplyr")
## load packages
library(dplyr)
## read csv file into RStudio
imdb <- read.csv("C:/DataRockie/R Programming/directory/imdb/imdb.csv", stringsAsFactors = FALSE)
## install packages
install.packages("dplyr")
## load packages
library(dplyr)
## read csv file into RStudio
imdb <- read.csv("C:\Online Learning\DataRockie Bootcamp\DataRockie Bootcamp 10th\R Programming\data\imdb\imdb.csv", stringsAsFactors = FALSE)
install.packages("dplyr")
## read csv file into RStudio
imdb <- read.csv("C:\Online Learning\DataRockie Bootcamp\DataRockie Bootcamp 10th\R Programming\data\imdb\imdb.csv", stringsAsFactors = FALSE)
## read csv file into RStudio
imdb <- read.csv("C: /Online Learning/DataRockie Bootcamp/DataRockie Bootcamp 10th/R Programming/data/imdb/imdb.csv", stringsAsFactors = FALSE)
## read csv file into RStudio
imdb <- read.csv("C:/Online Learning/DataRockie Bootcamp/DataRockie Bootcamp 10th/R Programming/data/imdb/imdb.csv", stringsAsFactors = FALSE)
View(imdb)
## review data structure
glimpse(imdb)
## print head and tail of imdb data
head(imdb, 10)
## read csv file into RStudio
imdb <- read.csv("C:/Online Learning/DataRockie Bootcamp/DataRockie Bootcamp 10th/R Programming/data/imdb/imdb.csv", stringsAsFactors = FALSE)
View(imdb)
## review data structure
glimpse(imdb)
## print head and tail of imdb data
head(imdb, 10)
tail(imdb, 10)
# select columns
select(imdb, MOVIE_NAME, RATING)
select(imdb, 1, 5)
select(imdb, movie_name = MOVIE_NAME, release_year = YEAR)
## pipe operator %>% call function without select function
## easy to create data pipelines [df %>% select() %>% filter() %>% mutate() %>% arrange()]
head(imdb)
imdb %>%
select(movie_name = MOVIE_NAME, release_year = YEAR) %>%
head()
imdb %>%
select(MOVIE_NAME, RATING)
## filter data
filter(imdb, SCORE >= 9.0)
imdb %>% filter(SCORE >= 9.0)
names(imdb) <- tolower(names(imdb))
imdb %>%
select(movie_name, year, score) %>%
filter(score >= 9.0 & year > 2000)
imdb %>%
select(movie_name, year, score) %>%
filter(score == 8.8 | score == 8.3 | score == 9.0)
imdb %>%
select(movie_name, year, score) %>%
filter(score %in% c(8.3, 8.8, 9.0))
## filter string columns
# grepl("Drama", imdb$genre) help find "Drama" within genre string columns
# while ignoring their position or if said movie have other genre type inside their string.
imdb %>%
select(movie_name, genre, rating) %>%
filter(rating == "PG-13")
imdb %>%
select(movie_name, genre, rating) %>%
filter(grepl("Drama", imdb$genre))
imdb %>%
select(movie_name) %>%
filter(grepl("King", imdb$movie_name))
# case sensitive with all lowercase "king"
## arrange data
head(imdb)
imdb %>%
arrange(length) %>%
head(10)
imdb %>%
arrange(desc(length)) %>% ## descending order
head(10)
imdb %>%
arrange(rating, desc(length))
## create new columns
imdb %>%
select(movie_name, score, length) %>%
mutate(score_group = if_else(score >= 9, "High Rating", "Low Rating"),
length_group = if_else(length >= 120, "Long Film", "Short Film"))
imdb %>%
select(movie_name, score) %>%
mutate(score = score + 0.1) %>%
head(10)
## summarize and group by
# summarise(name_stat = stat_func())
# summarise stat groups by rating types
imdb %>%
filter(rating != "") %>%
group_by(rating) %>%
summarise(mean_length = mean(length),
sd_length = sd(length),
min_length = min(length),
max_length = max(length),
n = n()
)
## join data
favorite_films <- data.frame(id = c(5, 10, 25, 30, 98))
favorite_films %>%
inner_join(imdb, by = c("id" = "no"))
# --- Join table favorite_films with imdb by column "id"   ##
##              inside favorite_films with column "no" ---  #
## write csv file (export result)
imdb_prep <- imdb %>%
select(movie_name, released_year = year, rating, length, score) %>%
filter(rating == "R" & released_year > 2000)
## export csv file
write.csv(imdb_prep, "imdb_prep.csv", row.names = FALSE)
save.image()
