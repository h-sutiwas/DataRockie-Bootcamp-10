knitr::opts_chunk$set(echo = TRUE)
## Convert Data Types
## main functions
## as.numeric()
## as.character()
## as.logical()
x <- 100
class(x)
char_x <- as.character(x)
num_x <- as.numeric(x)
## logical: TRUE/FALSE
as.logical(0)
as.logical(1)
as.numeric(0)
as.numeric(1)
## --------------------------------------------------------
## vector
1:10
11:25
## sequence generation
seq(from = 1, to = 100, by = 5)
## help file
help(seq)
## function c
friends <- c("David", "Marry", "Anna", "John", "William")
is_male <- c(TRUE, FALSE, FALSE, TRUE, TRUE)
## --------------------------------------------------------
## matrix
x <- 1:25
length(x)
dim(x) <- c(5,5)
m1 <- matrix(1:25, ncol=5)
m2 <- matrix(1:6, ncol=3, nrow=2, byrow = T)
## Element wise computation
m1 + 100
m2 * 10
## --------------------------------------------------------
## list
my_name <- "Ham"
my_friends <- c("Wan", "Eng", "Sue")
m3 <- matrix(1:25, ncol=5)
r_iscool <- TRUE
my_list <- list(item1 = my_name,
item2 = my_friends,
item3 = m3,
item4 = r_iscool)
my_list$item1
my_list$item2
my_list$item3
my_list$item4
## --------------------------------------------------------
## Data Frames
friends <- c("Wan", "Erik", "Ashley", "Bee", "Toon")
Ages <- c(26, 27, 27, 28, 32)
locations <- c("New York",
"London",
"Tokyo",
"Manchester",
"New York")
movie_lover <- c(TRUE, TRUE, TRUE, FALSE, FALSE)
df <- data.frame(friends,
Ages,
locations,
movie_lover)
View(df)
## create data frame from list
my_list <- list(friends = friends,
ages = Ages,
locations = locations,
movie_lover = movie_lover)
data.frame(my_list)
## --------------------------------------------------------
## subset
friends[1:3]
friends[c(1, 3, 5)]
friends[4:5]
ages <- c(26, 27, 27, 28, 32)
View(df)
ifelse(score >= 90, "Passed", ifelse(
score >= 50, "OK", "Enroll Again"
))
## control flow
## if else statement
score = readline( prompt = "Enter your score: ")
score = as.numeric(score);
if (score >= 80){
print("Passed")
} else {
print("Failed")
}
ifelse(score >= 90, "Passed", ifelse(
score >= 50, "OK", "Enroll Again"
))
## for loop
mat <- matrix(rnorm(100), ncol = 5)
par(mfrow = c(2,3))
for (i in 1:5) {
hist(mat[, i], main = paste("Column", i), xlab = "Values", col = "lightblue")
}
## while loop
while (score <= 90) {
score <- score + 1
}
## function: input -> f() -> output
x <- c(10, 20, 55, 77, 100)
sum(x)
mean(x)
sd(x)
name_age <- function(){
name = readline(prompt = "Enter your name: ")
age = readline(prompt = "Enter your age: ")
age = as.integer(age)
print( paste("Hello", name, "!! Your age is", age) )
}
name_age()
greeting_name <- function(name = "Ham", age = 22) {
print(paste("Hello! ", name))
print(paste("Age: ", age))
}
greeting_name <- function(name = "Ham", age = 22) {
print(paste("Hello! ", name))
print(paste("Age: ", age))
}
greeting_name()
greeting_name <- function(name = "Ham", age = 22) {
print(paste("Hello!", name))
print(paste("Age:", age))
}
greeting_name()
# add_two_nums() function
add_two_nums <- function(val1, val2) {
val1 + val2
}
# cube() function
cube <- function(base, power=3) {
return(base ** power)
}
# count_ball() function
balls <- c("red", "red", "blue", "green",
"green", "green", "green", "red")
count_ball <- function(balls, color) {
sum(balls == color)
}
# add_two_nums() function
add_two_nums <- function(val1, val2) {
val1 + val2
}
# cube() function
cube <- function(base, power=3) {
return(base ** power)
}
# count_ball() function
balls <- c("red", "red", "blue", "green",
"green", "green", "green", "red")
count_ball <- function(balls, color) {
sum(balls == color)
}
count_ball(balls, c("red", "blue"))
# add_two_nums() function
add_two_nums <- function(val1, val2) {
val1 + val2
}
# cube() function
cube <- function(base, power=3) {
return(base ** power)
}
# count_ball() function
balls <- c("red", "red", "blue", "green",
"green", "green", "green", "red")
count_ball <- function(balls, color) {
sum(balls == color)
}
count_ball(balls, c("red", "blue"))
# add_two_nums() function
add_two_nums <- function(val1, val2) {
val1 + val2
}
# cube() function
cube <- function(base, power=3) {
return(base ** power)
}
# count_ball() function
balls <- c("red", "red", "blue", "green",
"green", "green", "green", "red")
count_ball <- function(balls, color) {
sum(balls == color)
}
count_ball(balls, c("red"))
# add_two_nums() function
add_two_nums <- function(val1, val2) {
val1 + val2
}
# cube() function
cube <- function(base, power=3) {
return(base ** power)
}
# count_ball() function
balls <- c("red", "red", "blue", "green",
"green", "green", "green", "red")
count_ball <- function(balls, color) {
sum(balls == color)
}
count_ball(balls, "red")
count_ball(balls, "blue")
count_ball(balls, "green")
# refactor our code for more readability
cal_mean_by_col <- function(df) {
col_names <- names(df)
# we use [[]] to extract column as vector
for (i in 1:ncol(df)) {
avg_col <- mean(df[[i]])
print(paste(col_names[i], ":", avg_col))
}
}
# test our code with mtcars
cal_mean_by_col(mtcars)
# refactor our code for more readability
cal_mean_by_col <- function(df) {
col_names <- names(df)
# we use [[]] to extract column as vector
for (i in 1:ncol(df)) {
avg_col <- mean(df[[i]])
print(paste(col_names[i], ":", avg_col))
}
}
# test our code with mtcars
cal_mean_by_col(mtcars)
# apply function
avg_by_row_mtcars <- apply(mtcars, MARGIN = 1, mean())
# apply function
avg_by_row_mtcars <- apply(mtcars, MARGIN = 1, mean
# apply function
avg_by_row_mtcars <- apply(mtcars, MARGIN = 1, mean)
# apply function
avg_by_row_mtcars <- apply(mtcars, MARGIN = 1, mean)
avg_by_row_mtcars[1:10]
# apply function
avg_by_row_mtcars <- apply(mtcars, MARGIN = 2, mean)
avg_by_row_mtcars[1:10]
# apply function
avg_by_row_mtcars <- apply(mtcars, MARGIN = 1, mean)
avg_by_row_mtcars[1:10]
# apply function: MARGIN = (1: By rows, 2: By columns)
avg_by_row_mtcars <- apply(mtcars, MARGIN = 1, mean)
avg_by_row_mtcars[1:10]
